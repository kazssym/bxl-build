---
name: Build

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: "30 5 * * 6"

env:
  # Path to the NuGet global-packages folder.
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

  DOMINO_CACHE_DIRECTORY: ${{ github.workspace }}/.bxlcache

jobs:
  build:
    runs-on: windows-2022

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Checkout microsoft/BuildXL
        uses: actions/checkout@v5
        with:
          repository: microsoft/BuildXL
          path: BuildXL

      - name: Create USN journal
        run: |
          fsutil usn createjournal m=0x20000000 a=0x8000000 D:

      # - name: Cache NuGet packages
      #   uses: actions/cache@v4
      #   with:
      #     key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.dsc') }}
      #     path: ${{ env.NUGET_PACKAGES }}
      #     restore-keys: |
      #       ${{ runner.os }}-nuget-

      - name: Cache BuildXL
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-buildxl-release-${{ hashFiles('**/*.dsc') }}
          path: ${{ env.DOMINO_CACHE_DIRECTORY }}
          # path: ./BuildXL/Out/Cache
          restore-keys: |
            ${{ runner.os }}-buildxl-release-
            ${{ runner.os }}-buildxl-

      - name: Find the MSVC version
        run: |
          ./Find-MsvcVersion.ps1
        shell: pwsh

      - name: Run bxl.cmd
        run: |
          ./bxl.cmd -deployconfig Release -minimal
        working-directory: ./BuildXL
        shell: pwsh

      - name: Prepare essential artifacts
        run: |
          # Create a temporary directory for essential files
          $essentialDir = "./BuildXL/Out/Essential"
          New-Item -ItemType Directory -Force -Path $essentialDir

          # Copy only essential executables and core libraries
          Copy-Item "./BuildXL/Out/Bin/bxl.exe" -Destination $essentialDir `
            -ErrorAction SilentlyContinue
          Copy-Item "./BuildXL/Out/Bin/bxlanalyzer.exe" -Destination $essentialDir `
            -ErrorAction SilentlyContinue

          # Copy essential DLLs (excluding test files and PDBs)
          Get-ChildItem "./BuildXL/Out/Bin/*.dll" | Where-Object {
            $_.Name -notlike "*Test*" -and $_.Name -notlike "*test*" `
              -and $_.Name -notlike "*UnitTest*"
          } | Copy-Item -Destination $essentialDir

          # Copy configuration files
          Get-ChildItem "./BuildXL/Out/Bin/*.config" | `
            Copy-Item -Destination $essentialDir -ErrorAction SilentlyContinue
          Get-ChildItem "./BuildXL/Out/Bin/*.json" | `
            Copy-Item -Destination $essentialDir -ErrorAction SilentlyContinue

          # Show size comparison
          $originalSize = (Get-ChildItem "./BuildXL/Out/Bin" -Recurse | `
            Measure-Object -Property Length -Sum).Sum
          $essentialSize = (Get-ChildItem $essentialDir -Recurse | `
            Measure-Object -Property Length -Sum).Sum

          Write-Host "Original size: $([math]::Round($originalSize/1MB, 2)) MB"
          Write-Host "Essential size: $([math]::Round($essentialSize/1MB, 2)) MB"
          Write-Host "Size reduction: " `
            "$([math]::Round(($originalSize - $essentialSize)/$originalSize * 100, 1))%"
        shell: pwsh

      - name: Upload outputs
        uses: actions/upload-artifact@v4
        with:
          name: bin
          path: ./BuildXL/Out/Essential
